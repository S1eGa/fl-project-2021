* Сборка *
  1. pip3 install pyparsing
  2. python3 parser.py

* Информация о парсер-комбинаторе *
  1. Это парсер-кобинатор, который основан на PEG, а не CFG. Преимущество заключается в том, что PEG лучше умеет обрабатвать choice operator (то есть, по сути, некоторые неоднозначности грамматики)

  2. Плюсы библиотеки:
    -- Достаточно сильно можно кастомизировать процесс парсинга, передавать свои обработчики токенов, заматченных отдельными правилами
    -- Наличие неплохой документации и примеров, по которым можно разбираться с библиотекой
     Минусы библиотеки:
    -- Довольно слабая декларативность при описании грамматики
    -- Неудобная обработка ошибок, отсутствие качественной кастомизации в их обработке
    -- Она на питоне...

* Как читать AST *

Практически у всех узлов AST есть отдельные типы. Они будут выводиться. Также, если тип проще, чем pllaceholder, то будет выведено также содержимое соответствующего объекта (поля структуры)

Пример того, как выглядит описание узла AST типа Expression (2 + 2 * 7 && 1 || 1 >= 0) в конcоли 

IntegerLiteral  2
IntegerLiteral  2
IntegerLiteral  7
EvalMultOp [<__main__.IntegerLiteral object at 0x7fc6152b2df0>, '*', <__main__.IntegerLiteral object at 0x7fc615398670>]
EvalAddOp [<__main__.IntegerLiteral object at 0x7fc615392fd0>, '+', <__main__.EvalMultOp object at 0x7fc6153982e0>]
IntegerLiteral  1
EvalAndOp [<__main__.EvalAddOp object at 0x7fc615398c70>, '&&', <__main__.IntegerLiteral object at 0x7fc6152bd1f0>]
IntegerLiteral  1
IntegerLiteral  0
EvalComparisonOp [<__main__.IntegerLiteral object at 0x7fc6152b2910>, '>=', <__main__.IntegerLiteral object at 0x7fc6152bd790>]
EvalOrOp [<__main__.EvalAndOp object at 0x7fc6152b2fd0>, '||', <__main__.EvalComparisonOp object at 0x7fc615398100>]

IntegerLiteral -- специальный узел AST, который хранит целочисленные литералы.
EvalMultOp -- специальный узел AST, который хранит операнды, над которыми производится умножение, а также хранит типы операций (подразумевается, что тут хранятся и деления, и умножения)
EvalAddOp, EvalOrOp -- аналогично
EvalComparisonOp -- на самом деле, работает очень похожим образом на EvalAddOp и EvalMulOp, хранит операнды и типы сравнений, которые были использованы

Общая логика такова, что слева указан тип ноды AST, а справа её содержимое

